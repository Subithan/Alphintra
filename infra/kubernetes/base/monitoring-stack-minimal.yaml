# Minimal Monitoring Stack for Local K3D Development
# Lightweight alternatives to Prometheus + Grafana

apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-metrics-config
  namespace: alphintra
data:
  metrics.py: |
    #!/usr/bin/env python3
    """
    Minimal metrics collection service for local development
    Collects basic health metrics and exposes them via HTTP
    """
    import asyncio
    import json
    import time
    from datetime import datetime
    from typing import Dict, List
    import httpx
    from fastapi import FastAPI
    from fastapi.responses import HTMLResponse
    import uvicorn

    app = FastAPI(title="Alphintra Metrics", version="1.0.0")

    # Service endpoints to monitor
    SERVICES = {
        "api-gateway": "http://api-gateway:8080/health",
        "auth-service": "http://auth-service:8080/health", 
        "trading-api": "http://trading-api:8080/health",
        "graphql-gateway": "http://graphql-gateway:8080/health",
        "strategy-engine": "http://strategy-engine:8080/health",
        "postgresql": "tcp://postgresql:5432",
        "redis": "tcp://redis:6379"
    }

    metrics_data = {}

    async def check_service_health(service_name: str, endpoint: str) -> Dict:
        """Check health of a single service"""
        try:
            if endpoint.startswith("http"):
                async with httpx.AsyncClient(timeout=5.0) as client:
                    response = await client.get(endpoint)
                    return {
                        "status": "healthy" if response.status_code == 200 else "unhealthy",
                        "response_time": response.elapsed.total_seconds(),
                        "status_code": response.status_code,
                        "timestamp": datetime.utcnow().isoformat()
                    }
            else:
                # TCP check for databases
                import socket
                host, port = endpoint.replace("tcp://", "").split(":")
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((host, int(port)))
                sock.close()
                return {
                    "status": "healthy" if result == 0 else "unhealthy",
                    "response_time": 0.001,
                    "timestamp": datetime.utcnow().isoformat()
                }
        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }

    async def collect_metrics():
        """Collect metrics from all services"""
        while True:
            current_metrics = {}
            for service_name, endpoint in SERVICES.items():
                current_metrics[service_name] = await check_service_health(service_name, endpoint)
            
            metrics_data.update(current_metrics)
            await asyncio.sleep(30)  # Collect every 30 seconds

    @app.on_event("startup")
    async def startup_event():
        asyncio.create_task(collect_metrics())

    @app.get("/")
    async def dashboard():
        """Simple HTML dashboard"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Alphintra Local Metrics</title>
            <meta http-equiv="refresh" content="30">
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .service { margin: 10px 0; padding: 10px; border-radius: 5px; }
                .healthy { background-color: #d4edda; color: #155724; }
                .unhealthy { background-color: #f8d7da; color: #721c24; }
                .header { background-color: #e9ecef; padding: 15px; margin-bottom: 20px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Alphintra Local Environment Health Dashboard</h1>
                <p>Last updated: {timestamp}</p>
            </div>
        """.format(timestamp=datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC"))

        for service_name, metrics in metrics_data.items():
            status_class = "healthy" if metrics.get("status") == "healthy" else "unhealthy"
            response_time = metrics.get("response_time", 0)
            html += f"""
            <div class="service {status_class}">
                <h3>{service_name.upper()}</h3>
                <p>Status: {metrics.get("status", "unknown")}</p>
                <p>Response Time: {response_time:.3f}s</p>
                <p>Last Check: {metrics.get("timestamp", "never")}</p>
                {f'<p>Error: {metrics.get("error", "")}</p>' if metrics.get("error") else ''}
            </div>
            """

        html += """
        </body>
        </html>
        """
        return HTMLResponse(content=html)

    @app.get("/metrics")
    async def get_metrics():
        """Prometheus-style metrics endpoint"""
        metrics_text = ""
        for service_name, metrics in metrics_data.items():
            is_healthy = 1 if metrics.get("status") == "healthy" else 0
            response_time = metrics.get("response_time", 0)
            
            metrics_text += f'alphintra_service_up{{service="{service_name}"}} {is_healthy}\n'
            metrics_text += f'alphintra_service_response_time{{service="{service_name}"}} {response_time}\n'
        
        return metrics_text

    @app.get("/health")
    async def health():
        return {"status": "healthy", "service": "metrics-collector"}

    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8080)

  requirements.txt: |
    fastapi==0.104.1
    uvicorn[standard]==0.24.0
    httpx==0.25.2

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-metrics
  namespace: alphintra
  labels:
    app: simple-metrics
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-metrics
  template:
    metadata:
      labels:
        app: simple-metrics
        component: monitoring
    spec:
      containers:
      - name: metrics-collector
        image: python:3.11-slim
        command: ["/bin/sh"]
        args:
          - -c
          - |
            pip install --no-cache-dir fastapi uvicorn httpx
            python /app/metrics.py
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        volumeMounts:
        - name: metrics-config
          mountPath: /app/metrics.py
          subPath: metrics.py
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: metrics-config
        configMap:
          name: simple-metrics-config
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: simple-metrics
  namespace: alphintra
  labels:
    app: simple-metrics
    component: monitoring
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30090
    protocol: TCP
    name: http
  selector:
    app: simple-metrics