# Optimized PostgreSQL StatefulSet for K3D with reduced resource usage
# Production-ready configuration optimized for Alpine Linux deployment

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: alphintra
data:
  postgres.conf: |
    # PostgreSQL configuration optimized for K3D cluster with reduced resources
    listen_addresses = '*'
    port = 5432
    max_connections = 100
    shared_buffers = 128MB
    effective_cache_size = 256MB
    work_mem = 2MB
    maintenance_work_mem = 32MB
    checkpoint_completion_target = 0.9
    wal_buffers = 4MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 100
    
    # Memory optimization for K3D
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 1024
    track_counts = on
    track_functions = none
    
    # Logging configuration (minimal for performance)
    log_line_prefix = '%t [%p]: '
    log_checkpoints = off
    log_connections = off
    log_disconnections = off
    log_lock_waits = off
    log_temp_files = 0
    log_min_duration_statement = 1000
    
    # Performance tuning for K3D
    fsync = off  # Safe for development/testing
    synchronous_commit = off  # Safe for development/testing
    full_page_writes = off  # Safe for development/testing
    
  init-databases.sql: |
    -- Create databases for each microservice with optimized schemas
    CREATE DATABASE alphintra_trading;
    CREATE DATABASE alphintra_nocode;
    CREATE DATABASE alphintra_risk;
    CREATE DATABASE alphintra_user;
    CREATE DATABASE alphintra_broker;
    CREATE DATABASE alphintra_strategy;
    CREATE DATABASE alphintra_notification;
    
    -- Create service-specific users with limited privileges
    CREATE USER trading_service_user WITH ENCRYPTED PASSWORD 'trading_service_pass';
    CREATE USER nocode_service_user WITH ENCRYPTED PASSWORD 'nocode_service_pass';
    CREATE USER risk_service_user WITH ENCRYPTED PASSWORD 'risk_service_pass';
    CREATE USER user_service_user WITH ENCRYPTED PASSWORD 'user_service_pass';
    CREATE USER broker_service_user WITH ENCRYPTED PASSWORD 'broker_service_pass';
    CREATE USER strategy_service_user WITH ENCRYPTED PASSWORD 'strategy_service_pass';
    CREATE USER notification_service_user WITH ENCRYPTED PASSWORD 'notification_service_pass';
    
    -- Grant database access to respective users
    GRANT ALL PRIVILEGES ON DATABASE alphintra_trading TO trading_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_nocode TO nocode_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_risk TO risk_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_user TO user_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_broker TO broker_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_strategy TO strategy_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_notification TO notification_service_user;
    
    -- Create connection pooling configuration
    ALTER SYSTEM SET max_connections = 100;
    ALTER SYSTEM SET shared_buffers = '128MB';
    ALTER SYSTEM SET effective_cache_size = '256MB';
    
    -- Optimize for K3D environment
    ALTER SYSTEM SET work_mem = '2MB';
    ALTER SYSTEM SET maintenance_work_mem = '32MB';
    ALTER SYSTEM SET checkpoint_completion_target = 0.9;

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: alphintra
  labels:
    app: postgresql
    component: database
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      containers:
      - name: postgresql
        image: postgres:15.3-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: postgres
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alphintra-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgresql
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgres.conf
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d/init-databases.sql
          subPath: init-databases.sql
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
          items:
          - key: postgres.conf
            path: postgres.conf
      - name: postgresql-init
        configMap:
          name: postgresql-config
          items:
          - key: init-databases.sql
            path: init-databases.sql
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: local-path
      resources:
        requests:
          storage: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: alphintra
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app: postgresql

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-primary
  namespace: alphintra
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app: postgresql