# PostgreSQL StatefulSet for K3D Internal Networking
# Provides high-availability database with ClusterIP service for internal communication

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: alphintra
data:
  postgres.conf: |
    # PostgreSQL configuration optimized for K3D cluster
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging configuration
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default
    
    # Security settings
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'
    
  init-databases.sql: |
    -- Create databases for each microservice
    CREATE DATABASE alphintra_trading;
    CREATE DATABASE alphintra_nocode;
    CREATE DATABASE alphintra_risk;
    CREATE DATABASE alphintra_user;
    CREATE DATABASE alphintra_broker;
    CREATE DATABASE alphintra_strategy;
    CREATE DATABASE alphintra_notification;
    
    -- Create service-specific users with limited privileges
    CREATE USER trading_service_user WITH PASSWORD 'trading_service_pass';
    CREATE USER nocode_service_user WITH PASSWORD 'nocode_service_pass';
    CREATE USER risk_service_user WITH PASSWORD 'risk_service_pass';
    CREATE USER user_service_user WITH PASSWORD 'user_service_pass';
    CREATE USER broker_service_user WITH PASSWORD 'broker_service_pass';
    CREATE USER strategy_service_user WITH PASSWORD 'strategy_service_pass';
    CREATE USER notification_service_user WITH PASSWORD 'notification_service_pass';
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON DATABASE alphintra_trading TO trading_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_nocode TO nocode_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_risk TO risk_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_user TO user_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_broker TO broker_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_strategy TO strategy_service_user;
    GRANT ALL PRIVILEGES ON DATABASE alphintra_notification TO notification_service_user;

---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: alphintra
type: Opaque
data:
  # Base64 encoded passwords
  postgres-password: YWxwaGludHJhX3N1cGVyX3Bhc3M=  # alphintra_super_pass
  trading-password: dHJhZGluZ19zZXJ2aWNlX3Bhc3M=     # trading_service_pass
  nocode-password: bm9jb2RlX3NlcnZpY2VfcGFzcw==      # nocode_service_pass
  risk-password: cmlza19zZXJ2aWNlX3Bhc3M=            # risk_service_pass
  user-password: dXNlcl9zZXJ2aWNlX3Bhc3M=            # user_service_pass
  broker-password: YnJva2VyX3NlcnZpY2VfcGFzcw==      # broker_service_pass
  strategy-password: c3RyYXRlZ3lfc2VydmljZV9wYXNz    # strategy_service_pass
  notification-password: bm90aWZpY2F0aW9uX3NlcnZpY2VfcGFzcw== # notification_service_pass

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-primary
  namespace: alphintra
  labels:
    app: postgresql
    role: primary
spec:
  type: ClusterIP
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgresql
    role: primary

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  namespace: alphintra
  labels:
    app: postgresql
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgresql

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: alphintra
  labels:
    app: postgresql
spec:
  serviceName: postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        role: primary
    spec:
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
      containers:
      - name: postgresql
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          seccompProfile:
            type: RuntimeDefault
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: POSTGRES_DB
          value: "alphintra"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgresql-storage
          mountPath: "/var/lib/postgresql/data"
        - name: postgresql-config
          mountPath: "/etc/postgresql/postgresql.conf"
          subPath: postgres.conf
        - name: postgresql-config
          mountPath: "/docker-entrypoint-initdb.d/init-databases.sql"
          subPath: init-databases.sql
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: 10Gi