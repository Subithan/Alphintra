apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-service
  namespace: alphintra
  labels:
    app: trading-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trading-service
      version: v1
  template:
    metadata:
      labels:
        app: trading-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: trading-service
        image: localhost:5001/alphintra/trading-api:optimized
        imagePullPolicy: IfNotPresent
        command:
          - python
          - main.py
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        # Correct environment variables for Python FastAPI service
        - name: DATABASE_URL
          value: "postgresql://trading_service_user:trading_service_pass@postgresql-primary.alphintra.svc.cluster.local:5432/alphintra_trading"
        - name: REDIS_URL
          value: "redis://:alphintra_redis_pass@redis-primary.alphintra.svc.cluster.local:6379/1"
        - name: RISK_SERVICE_URL
          value: "http://risk-service.alphintra.svc.cluster.local:8080"
        - name: BROKER_SERVICE_URL
          value: "http://broker-service.alphintra.svc.cluster.local:8080"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service.alphintra.svc.cluster.local:8080"
        - name: PYTHONPATH
          value: "/app"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
              - ALL
      volumes:
      - name: app-code
        configMap:
          name: trading-service-code
      - name: tmp-volume
        emptyDir: {}
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command:
          - sh
          - -c
          - |
            echo "Waiting for PostgreSQL..."
            until nc -z postgresql-primary.alphintra.svc.cluster.local 5432; do
              echo "Waiting for PostgreSQL..."
              sleep 5
            done
            echo "Waiting for Redis..."
            until nc -z redis-primary.alphintra.svc.cluster.local 6379; do
              echo "Waiting for Redis..."
              sleep 5
            done
            echo "All dependencies are ready!"
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - trading-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: trading-service
  namespace: alphintra
  labels:
    app: trading-service
    service: trading-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: trading-service

---
# HorizontalPodAutoscaler for Trading Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trading-service-hpa
  namespace: alphintra
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trading-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60