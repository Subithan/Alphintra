# JWT Authentication Service for Secure Financial Trading Platform
# Provides centralized authentication with RSA-signed JWT tokens

apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-service-config
  namespace: alphintra
data:
  application.yml: |
    server:
      port: 8080
    
    spring:
      application:
        name: auth-service
      
      datasource:
        url: jdbc:postgresql://postgresql-primary.alphintra.svc.cluster.local:5432/alphintra_user
        username: user_service_user
        password: user_service_pass
        driver-class-name: org.postgresql.Driver
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
          leak-detection-threshold: 60000
      
      jpa:
        hibernate:
          ddl-auto: update
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQLDialect
            format_sql: true
        show-sql: false
      
      security:
        jwt:
          secret: ${JWT_SECRET}
          expiration: 86400000  # 24 hours
          refresh-expiration: 604800000  # 7 days
          algorithm: RS256
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://auth-service.alphintra.svc.cluster.local:8080
              jwk-set-uri: http://auth-service.alphintra.svc.cluster.local:8080/.well-known/jwks.json
      
      redis:
        host: redis-primary.alphintra.svc.cluster.local
        port: 6379
        password: ${REDIS_PASSWORD}
        database: 0
        timeout: 2000ms
        jedis:
          pool:
            max-active: 50
            max-idle: 20
            min-idle: 5
            max-wait: 2000ms
    
    eureka:
      client:
        service-url:
          defaultZone: http://eureka-server.alphintra.svc.cluster.local:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
      instance:
        prefer-ip-address: true
        ip-address: ${POD_IP:127.0.0.1}
        instance-id: ${spring.application.name}:${POD_IP}:${server.port}
        lease-renewal-interval-in-seconds: 10
        lease-expiration-duration-in-seconds: 30
        health-check-url-path: /actuator/health
        status-page-url-path: /actuator/info
        metadata-map:
          zone: alphintra-cluster
          profile: ${spring.profiles.active:default}
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus,jwks
      endpoint:
        health:
          show-details: always
    
    logging:
      level:
        com.alphintra: DEBUG
        org.springframework.security: INFO
        org.springframework.web: INFO
    
    # Custom application properties
    alphintra:
      auth:
        password:
          min-length: 8
          require-uppercase: true
          require-lowercase: true
          require-digit: true
          require-special: true
        session:
          timeout: 3600  # 1 hour
          max-concurrent: 3
        rate-limiting:
          login-attempts: 5
          lockout-duration: 300  # 5 minutes
        mfa:
          enabled: true
          issuer: "Alphintra Trading Platform"
        audit:
          enabled: true
          retention-days: 90

---
apiVersion: v1
kind: Secret
metadata:
  name: auth-service-secret
  namespace: alphintra
type: Opaque
data:
  # Base64 encoded secrets
  jwt-secret: YWxwaGludHJhX2p3dF9zdXBlcl9zZWNyZXRfa2V5X2Zvcl9maW5hbmNpYWxfcGxhdGZvcm1fc2VjdXJpdHlfcnNhXzI1Ng==
  redis-password: YWxwaGludHJhX3JlZGlzX3Bhc3M=
  db-password: dXNlcl9zZXJ2aWNlX3Bhc3M=

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: alphintra
  labels:
    app: auth-service
    service: auth-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: auth-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: alphintra
  labels:
    app: auth-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
      version: v1
  template:
    metadata:
      labels:
        app: auth-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: auth-service
        image: openjdk:17-jre-slim
        imagePullPolicy: IfNotPresent
        command:
          - java
          - -jar
          - /app/auth-service.jar
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: JAVA_OPTS
          value: >-
            -server
            -Xmx512m
            -Xms256m
            -XX:+UseG1GC
            -XX:MaxGCPauseMillis=50
            -XX:+UseStringDeduplication
            -XX:+UseCompressedOops
            -Djava.security.egd=file:/dev/./urandom
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-service-secret
              key: jwt-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: auth-service-secret
              key: redis-password
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: auth-service-secret
              key: db-password
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: auth-config
          mountPath: /workspace/application.yml
          subPath: application.yml
        - name: auth-jar
          mountPath: /app
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
      volumes:
      - name: auth-config
        configMap:
          name: auth-service-config
      - name: auth-jar
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      - name: maven-cache
        persistentVolumeClaim:
          claimName: maven-cache
      initContainers:
      - name: build-auth-service
        image: maven:3.8.1-openjdk-17-slim
        command:
          - sh
          - -c
          - |
            # Create a basic Spring Boot auth service
            mkdir -p /workspace/src/main/java/com/alphintra/auth
            mkdir -p /workspace/src/main/resources
            
            # Create pom.xml
            cat > /workspace/pom.xml << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                     http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>
                <parent>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-parent</artifactId>
                    <version>3.2.0</version>
                    <relativePath/>
                </parent>
                <groupId>com.alphintra</groupId>
                <artifactId>auth-service</artifactId>
                <version>1.0.0</version>
                <properties>
                    <java.version>17</java.version>
                    <spring-cloud.version>2023.0.0</spring-cloud.version>
                </properties>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-security</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-data-jpa</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-data-redis</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-actuator</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>io.jsonwebtoken</groupId>
                        <artifactId>jjwt-api</artifactId>
                        <version>0.12.3</version>
                    </dependency>
                    <dependency>
                        <groupId>io.jsonwebtoken</groupId>
                        <artifactId>jjwt-impl</artifactId>
                        <version>0.12.3</version>
                        <scope>runtime</scope>
                    </dependency>
                    <dependency>
                        <groupId>io.jsonwebtoken</groupId>
                        <artifactId>jjwt-jackson</artifactId>
                        <version>0.12.3</version>
                        <scope>runtime</scope>
                    </dependency>
                </dependencies>
                <dependencyManagement>
                    <dependencies>
                        <dependency>
                            <groupId>org.springframework.cloud</groupId>
                            <artifactId>spring-cloud-dependencies</artifactId>
                            <version>${spring-cloud.version}</version>
                            <type>pom</type>
                            <scope>import</scope>
                        </dependency>
                    </dependencies>
                </dependencyManagement>
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-maven-plugin</artifactId>
                        </plugin>
                    </plugins>
                </build>
            </project>
            EOF
            
            # Create main application class
            cat > /workspace/src/main/java/com/alphintra/auth/AuthServiceApplication.java << 'EOF'
            package com.alphintra.auth;
            
            import org.springframework.boot.SpringApplication;
            import org.springframework.boot.autoconfigure.SpringBootApplication;
            import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
            
            @SpringBootApplication
            @EnableDiscoveryClient
            public class AuthServiceApplication {
                public static void main(String[] args) {
                    SpringApplication.run(AuthServiceApplication.class, args);
                }
            }
            EOF
            
            # Create basic controller
            cat > /workspace/src/main/java/com/alphintra/auth/AuthController.java << 'EOF'
            package com.alphintra.auth;
            
            import org.springframework.web.bind.annotation.*;
            import org.springframework.http.ResponseEntity;
            import java.util.Map;
            
            @RestController
            @RequestMapping("/api/v1/auth")
            public class AuthController {
                
                @PostMapping("/login")
                public ResponseEntity<Map<String, String>> login(@RequestBody Map<String, String> credentials) {
                    return ResponseEntity.ok(Map.of("token", "jwt-token-placeholder", "message", "Login successful"));
                }
                
                @PostMapping("/register")
                public ResponseEntity<Map<String, String>> register(@RequestBody Map<String, String> userInfo) {
                    return ResponseEntity.ok(Map.of("message", "Registration successful"));
                }
                
                @GetMapping("/validate")
                public ResponseEntity<Map<String, String>> validate(@RequestHeader("Authorization") String token) {
                    return ResponseEntity.ok(Map.of("valid", "true", "message", "Token is valid"));
                }
                
                @GetMapping("/health")
                public ResponseEntity<Map<String, String>> health() {
                    return ResponseEntity.ok(Map.of("status", "UP", "service", "auth-service"));
                }
                
                @GetMapping("/ready")
                public ResponseEntity<Map<String, String>> ready() {
                    return ResponseEntity.ok(Map.of("status", "READY", "service", "auth-service"));
                }
            }
            EOF
            
            cd /workspace
            mvn clean package -DskipTests
            cp target/*.jar /app/auth-service.jar
        volumeMounts:
        - name: auth-jar
          mountPath: /app
        - name: maven-cache
          mountPath: /root/.m2
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1"
      - name: wait-for-dependencies
        image: busybox:1.35
        command:
          - sh
          - -c
          - |
            echo "Waiting for PostgreSQL..."
            until nc -z postgresql-primary.alphintra.svc.cluster.local 5432; do
              echo "Waiting for PostgreSQL..."
              sleep 5
            done
            echo "Waiting for Redis..."
            until nc -z redis-primary.alphintra.svc.cluster.local 6379; do
              echo "Waiting for Redis..."
              sleep 5
            done
            echo "Waiting for Eureka Server..."
            until nc -z eureka-server.alphintra.svc.cluster.local 8761; do
              echo "Waiting for Eureka Server..."
              sleep 5
            done
            echo "All dependencies are ready!"
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - auth-service
              topologyKey: kubernetes.io/hostname

---
# Additional volume for Maven cache
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: maven-cache
  namespace: alphintra
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 2Gi