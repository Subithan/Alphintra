# Istio Service Mesh Configuration for Secure Financial Trading Platform
# Provides mTLS, traffic management, and security policies

# Istio Gateway for external traffic
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: alphintra-gateway
  namespace: alphintra
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - api.alphintra.local
    - localhost
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: alphintra-tls-secret
    hosts:
    - api.alphintra.local
    - localhost

---
# Virtual Service for API Gateway routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: alphintra-vs
  namespace: alphintra
spec:
  hosts:
  - api.alphintra.local
  - localhost
  gateways:
  - alphintra-gateway
  http:
  - match:
    - uri:
        prefix: /api/v1/auth
    route:
    - destination:
        host: auth-service.alphintra.svc.cluster.local
        port:
          number: 8080
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: api-gateway.alphintra.svc.cluster.local
        port:
          number: 8080
    timeout: 60s
    retries:
      attempts: 3
      perTryTimeout: 20s

---
# Destination Rules for load balancing and circuit breaker
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: api-gateway-dr
  namespace: alphintra
spec:
  host: api-gateway.alphintra.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
    circuitBreaker:
      consecutiveGatewayErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: auth-service-dr
  namespace: alphintra
spec:
  host: auth-service.alphintra.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 25
        http2MaxRequests: 50
        maxRequestsPerConnection: 5
        maxRetries: 3
    circuitBreaker:
      consecutiveGatewayErrors: 3
      interval: 30s
      baseEjectionTime: 30s

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: trading-service-dr
  namespace: alphintra
spec:
  host: trading-service.alphintra.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 2
    circuitBreaker:
      consecutiveGatewayErrors: 3
      interval: 20s
      baseEjectionTime: 20s

---
# PeerAuthentication for mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: alphintra
spec:
  mtls:
    mode: STRICT

---
# Authorization Policy for service-to-service communication
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: alphintra-authz
  namespace: alphintra
spec:
  rules:
  # Allow API Gateway to access all services
  - from:
    - source:
        principals: ["cluster.local/ns/alphintra/sa/default"]
        namespaces: ["alphintra"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
  # Allow auth service to be accessed from API Gateway
  - to:
    - operation:
        paths: ["/api/v1/auth/*"]
        methods: ["GET", "POST"]
  # Allow health checks
  - to:
    - operation:
        paths: ["/actuator/health", "/health", "/ready"]
        methods: ["GET"]

---
# Authorization Policy specifically for Auth Service
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: auth-service-authz
  namespace: alphintra
spec:
  selector:
    matchLabels:
      app: auth-service
  rules:
  # Allow unauthenticated access to login and register
  - to:
    - operation:
        paths: ["/api/v1/auth/login", "/api/v1/auth/register"]
        methods: ["POST"]
  # Allow health checks
  - to:
    - operation:
        paths: ["/actuator/health", "/health", "/ready"]
        methods: ["GET"]
  # Allow JWT validation from other services
  - from:
    - source:
        principals: ["cluster.local/ns/alphintra/sa/default"]
    to:
    - operation:
        paths: ["/api/v1/auth/validate"]
        methods: ["GET", "POST"]

---
# Authorization Policy for Trading Service (requires authentication)
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: trading-service-authz
  namespace: alphintra
spec:
  selector:
    matchLabels:
      app: trading-service
  rules:
  # Require JWT token for trading operations
  - from:
    - source:
        requestPrincipals: ["*"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]
  # Allow health checks without authentication
  - to:
    - operation:
        paths: ["/health", "/ready", "/actuator/health"]
        methods: ["GET"]

---
# Request Authentication for JWT validation
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-auth
  namespace: alphintra
spec:
  jwtRules:
  - issuer: "http://auth-service.alphintra.svc.cluster.local:8080"
    jwksUri: "http://auth-service.alphintra.svc.cluster.local:8080/.well-known/jwks.json"
    audiences:
    - "alphintra-trading-platform"
    forwardOriginalToken: true

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: alphintra-services
  namespace: alphintra
  labels:
    app: alphintra
spec:
  selector:
    matchLabels:
      app: api-gateway
  endpoints:
  - port: http
    path: /actuator/prometheus
    interval: 30s
    scrapeTimeout: 10s
  - port: http
    path: /stats/prometheus
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - alphintra

---
# Telemetry configuration for distributed tracing
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: alphintra-telemetry
  namespace: alphintra
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        destination_service_name:
          value: "%{destination_service_name | 'unknown'}"
        source_app:
          value: "%{source_app | 'unknown'}"
        destination_app:
          value: "%{destination_app | 'unknown'}"
  tracing:
  - providers:
    - name: jaeger
  accessLogging:
  - providers:
    - name: otel

---
# Envoy Filter for custom headers
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: alphintra-headers
  namespace: alphintra
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inline_code: |
            function envoy_on_request(request_handle)
              -- Add security headers
              request_handle:headers():add("X-Content-Type-Options", "nosniff")
              request_handle:headers():add("X-Frame-Options", "DENY")
              request_handle:headers():add("X-XSS-Protection", "1; mode=block")
              request_handle:headers():add("Referrer-Policy", "strict-origin-when-cross-origin")
              request_handle:headers():add("Content-Security-Policy", "default-src 'self'")
            end
            
            function envoy_on_response(response_handle)
              -- Add response security headers
              response_handle:headers():add("X-Content-Type-Options", "nosniff")
              response_handle:headers():add("X-Frame-Options", "DENY")
            end

---
# Sidecar configuration for optimized resource usage
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: alphintra-sidecar
  namespace: alphintra
spec:
  egress:
  - hosts:
    - "./*"
    - "istio-system/*"
    - "monitoring/*"
  ingress:
  - port:
      number: 8080
      name: http
      protocol: HTTP
    defaultEndpoint: 127.0.0.1:8080

---
# Workload Entry for external services
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: external-broker-api
  namespace: alphintra
spec:
  address: external-broker.example.com
  ports:
    https: 443
  labels:
    app: external-broker
    version: v1

---
# Service Entry for external broker access
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-broker-se
  namespace: alphintra
spec:
  hosts:
  - external-broker.example.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
# Traffic splitting for canary deployments
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: trading-service-canary
  namespace: alphintra
spec:
  hosts:
  - trading-service.alphintra.svc.cluster.local
  http:
  - match:
    - headers:
        canary:
          exact: "true"
    route:
    - destination:
        host: trading-service.alphintra.svc.cluster.local
        subset: canary
  - route:
    - destination:
        host: trading-service.alphintra.svc.cluster.local
        subset: stable

---
# Destination rule for canary deployments
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: trading-service-canary-dr
  namespace: alphintra
spec:
  host: trading-service.alphintra.svc.cluster.local
  subsets:
  - name: stable
    labels:
      version: v1
  - name: canary
    labels:
      version: v2
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN