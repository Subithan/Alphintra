# API Gateway Deployment for Secure Microservices Architecture
# Spring Cloud Gateway with Eureka Service Discovery and JWT Authentication

apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: alphintra
data:
  bootstrap.yml: |
    spring:
      application:
        name: api-gateway
      cloud:
        config:
          uri: http://config-server.alphintra.svc.cluster.local:8888
          discovery:
            enabled: true
            service-id: config-server
          fail-fast: true
          retry:
            initial-interval: 1000
            max-attempts: 6
            max-interval: 2000
            multiplier: 1.1
    
    eureka:
      client:
        service-url:
          defaultZone: http://eureka-server.alphintra.svc.cluster.local:8761/eureka/

---
apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secret
  namespace: alphintra
type: Opaque
data:
  # Base64 encoded secrets
  jwt-secret: YWxwaGludHJhX2p3dF9zdXBlcl9zZWNyZXRfa2V5X2Zvcl9maW5hbmNpYWxfcGxhdGZvcm0=
  redis-password: YWxwaGludHJhX3JlZGlzX3Bhc3M=

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: alphintra
  labels:
    app: api-gateway
    service: api-gateway
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: api-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-external
  namespace: alphintra
  labels:
    app: api-gateway
    service: api-gateway-external
spec:
  type: NodePort
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      nodePort: 30001
      protocol: TCP
  selector:
    app: api-gateway

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: alphintra
  labels:
    app: api-gateway
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
      version: v1
  template:
    metadata:
      labels:
        app: api-gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: api-gateway
        image: localhost:5001/alphintra/api-gateway:optimized
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: JAVA_OPTS
          value: >-
            -server
            -Xmx1g
            -Xms512m
            -XX:+UseG1GC
            -XX:MaxGCPauseMillis=100
            -XX:+UseStringDeduplication
            -XX:+UseCompressedOops
            -Djava.security.egd=file:/dev/./urandom
            -Dspring.backgroundpreinitializer.ignore=true
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-gateway-secret
              key: jwt-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-gateway-secret
              key: redis-password
        - name: REDIS_HOST
          value: "redis-primary.alphintra.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        volumeMounts:
        - name: gateway-config
          mountPath: /workspace/bootstrap.yml
          subPath: bootstrap.yml
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
      volumes:
      - name: gateway-config
        configMap:
          name: api-gateway-config
      - name: tmp-volume
        emptyDir: {}
      # Removing init containers to simplify deployment for security testing
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api-gateway
              topologyKey: kubernetes.io/hostname

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: alphintra
  labels:
    app: api-gateway
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
spec:
  rules:
  - host: api.alphintra.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 8080
  - host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 8080

---
# HorizontalPodAutoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: alphintra
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60