# Main Docker Compose file for Alphintra Trading Platform
# This file imports the base configuration and can be extended with environment-specific overrides

# Remove this line: version: '3.8'

# Import base configuration
include:
  - docker-compose.base.yml

# Additional services specific to the main orchestration
services:
  # ===============================
  # ALPHINTRA APPLICATION SERVICES
  # ===============================

  # API Gateway - Central entry point
  gateway:
    build:
      context: ../../src/backend/gateway
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${ENVIRONMENT:-development}
      REDIS_HOST: redis-master
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
    networks:
      - alphintra-network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Auth Service - Authentication and authorization
  auth-service:
    build:
      context: ../../src/backend/auth-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-auth-service
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-alphintra}:${POSTGRES_PASSWORD:-alphintra123}@postgres:5432/${POSTGRES_DB:-alphintra}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    networks:
      - alphintra-network
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Trading API - Core trading functionality
  trading-api:
    build:
      context: ../../src/backend/trading-api
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-trading-api
    ports:
      - "8002:8002"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-alphintra}:${POSTGRES_PASSWORD:-alphintra123}@postgres:5432/${POSTGRES_DB:-alphintra}
      TIMESCALEDB_URL: postgresql://${TIMESCALE_USER:-timescale}:${TIMESCALE_PASSWORD:-timescale123}@timescaledb:5432/${TIMESCALE_DB:-timescaledb}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/1
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SENTRY_DSN: ${SENTRY_DSN:-}
    networks:
      - alphintra-network
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Strategy Engine - Trading strategy execution
  strategy-engine:
    build:
      context: ../../src/backend/strategy-engine
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-strategy-engine
    ports:
      - "8003:8003"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-alphintra}:${POSTGRES_PASSWORD:-alphintra123}@postgres:5432/${POSTGRES_DB:-alphintra}
      TIMESCALEDB_URL: postgresql://${TIMESCALE_USER:-timescale}:${TIMESCALE_PASSWORD:-timescale123}@timescaledb:5432/${TIMESCALE_DB:-timescaledb}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/2
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MLFLOW_TRACKING_URI: http://mlflow:5000
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SENTRY_DSN: ${SENTRY_DSN:-}
    networks:
      - alphintra-network
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Broker Connector - Exchange integrations
  broker-connector:
    build:
      context: ../../src/backend/broker-connector
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-broker-connector
    ports:
      - "8005:8005"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-alphintra}:${POSTGRES_PASSWORD:-alphintra123}@postgres:5432/${POSTGRES_DB:-alphintra}
      TIMESCALEDB_URL: postgresql://${TIMESCALE_USER:-timescale}:${TIMESCALE_PASSWORD:-timescale123}@timescaledb:5432/${TIMESCALE_DB:-timescaledb}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/3
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SENTRY_DSN: ${SENTRY_DSN:-}
      # Exchange API credentials
      BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      COINBASE_API_KEY: ${COINBASE_API_KEY:-}
      COINBASE_SECRET_KEY: ${COINBASE_SECRET_KEY:-}
      COINBASE_PASSPHRASE: ${COINBASE_PASSPHRASE:-}
    networks:
      - alphintra-network
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Broker Simulator - Mock exchange for testing
  broker-simulator:
    build:
      context: ../../src/backend/broker-simulator
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-broker-simulator
    ports:
      - "8006:8006"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-alphintra}:${POSTGRES_PASSWORD:-alphintra123}@postgres:5432/${POSTGRES_DB:-alphintra}
      TIMESCALEDB_URL: postgresql://${TIMESCALE_USER:-timescale}:${TIMESCALE_PASSWORD:-timescale123}@timescaledb:5432/${TIMESCALE_DB:-timescaledb}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/4
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    networks:
      - alphintra-network
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===============================
  # STREAM PROCESSING SERVICES
  # ===============================

  # Apache Flink Job Manager - Stream processing coordination
  flink-jobmanager:
    image: apache/flink:1.18-scala_2.12
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 4
        parallelism.default: 4
        jobmanager.memory.process.size: 2048m
        taskmanager.memory.process.size: 2048m
        taskmanager.memory.flink.size: 1536m
        state.backend: rocksdb
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
    volumes:
      - ./src/streaming/flink-jobs:/opt/flink/jobs:ro
      - flink_checkpoints:/opt/flink/checkpoints
      - flink_savepoints:/opt/flink/savepoints
    networks:
      - alphintra-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Apache Flink Task Manager - Stream processing execution
  flink-taskmanager:
    image: apache/flink:1.18-scala_2.12
    # Remove this line:
    # container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-flink-taskmanager-1
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 4
        parallelism.default: 4
        taskmanager.memory.process.size: 2048m
        taskmanager.memory.flink.size: 1536m
    volumes:
      - flink_checkpoints:/opt/flink/checkpoints
      - flink_savepoints:/opt/flink/savepoints
    networks:
      - alphintra-network
    restart: unless-stopped

  # ===============================
  # UTILITY SERVICES
  # ===============================

  # MailHog - Email testing (development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ${COMPOSE_PROJECT_NAME:-alphintra}-mailhog
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - alphintra-network
    restart: unless-stopped
    profiles:
      - dev
      - development

# ===============================
# ADDITIONAL VOLUMES
# ===============================
volumes:
  flink_checkpoints:
    driver: local
  flink_savepoints:
    driver: local