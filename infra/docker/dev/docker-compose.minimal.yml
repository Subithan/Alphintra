# Minimal Development Docker Compose Configuration
# Only essential services: PostgreSQL, Redis, and Kafka
# Run: docker-compose -f docker-compose.minimal.yml up -d

services:
  # PostgreSQL - Main application database
  postgres:
    image: postgres:15-alpine
    container_name: alphintra-minimal-postgres
    environment:
      POSTGRES_DB: alphintra
      POSTGRES_USER: alphintra
      POSTGRES_PASSWORD: alphintra123
    ports:
      - "5432:5432"
    volumes:
      - postgres_minimal_data:/var/lib/postgresql/data
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=alphintra123 psql -U alphintra -d alphintra -c 'SELECT 1;'"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis - Cache and session store
  redis:
    image: redis:7-alpine
    container_name: alphintra-minimal-redis
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_minimal_data:/data
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: alphintra-minimal-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - alphintra-minimal-network
    restart: unless-stopped

  # Kafka - Message streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: alphintra-minimal-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - alphintra-minimal-network
    healthcheck:
      # A healthcheck for Kafka to ensure the broker is ready.
      # It uses the kafka-topics command to list topics, which requires the broker to be operational.
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  # No-Code Service - Visual workflow builder API
  no-code-service:
    build:
      context: ../../../src/backend/no-code-service
      dockerfile: Dockerfile
    container_name: alphintra-minimal-no-code-service
    environment:
      DATABASE_URL: postgresql://alphintra:alphintra123@postgres:5432/alphintra-no-code-service
      REDIS_URL: redis://:redis123@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      BACKTEST_SERVICE_URL: http://backtest-service:8007
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backtest-service:
        condition: service_healthy
    ports:
      - "8006:8006"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Backtest Service - Trading strategy backtesting microservice
  backtest-service:
    build:
      context: ../../../src/backend/backtest-service
      dockerfile: Dockerfile
    container_name: alphintra-minimal-backtest-service
    environment:
      PORT: 8007
      LOG_LEVEL: info
    ports:
      - "8007:8007"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # AI/ML Strategy Service - Machine learning and algorithmic trading strategies
  ai-ml-strategy-service:
    build:
      context: ../../../src/backend/ai-ml-strategy-service
      dockerfile: Dockerfile
    container_name: alphintra-minimal-ai-ml-strategy-service
    environment:
      # Application Settings
      ENVIRONMENT: development
      PORT: 8002
      DEBUG: true
      LOG_LEVEL: INFO
      
      # Security Settings
      SECRET_KEY: dev-super-secret-jwt-key-that-should-be-at-least-256-bits-long
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://alphintra:alphintra123@postgres:5432/alphintra-ai-ml-strategy-service
      REDIS_URL: redis://:redis123@redis:6379
      
      # Google Cloud Platform (Development settings)
      GCP_PROJECT_ID: alphintra-dev
      GCP_REGION: us-central1
      GCS_BUCKET_NAME: alphintra-dev-storage
      VERTEX_AI_LOCATION: us-central1
      
      # MLflow Configuration
      MLFLOW_TRACKING_URI: http://localhost:5001
      MLFLOW_EXPERIMENT_NAME: alphintra-strategies
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONSUMER_GROUP: ai-ml-strategy-service
      
      # CORS Settings
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Gateway Service - API Gateway using Spring Cloud Gateway
  gateway:
    build:
      context: ../../../src/backend/gateway
      dockerfile: Dockerfile.distroless
    container_name: alphintra-minimal-gateway
    environment:
      SPRING_PROFILES_ACTIVE: standalone
      REDIS_HOST: redis
      REDIS_PASSWORD: redis123
      DATABASE_URL: postgresql://alphintra:alphintra123@postgres:5432/alphintra
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # GraphQL Gateway - GraphQL API interface
  graphql-gateway:
    build:
      context: ../../../src/backend/graphql-gateway
      dockerfile: Dockerfile
    container_name: alphintra-minimal-graphql-gateway
    environment:
      DATABASE_URL: postgresql://alphintra:alphintra123@postgres:5432/alphintra
      REDIS_URL: redis://:redis123@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      NO_CODE_SERVICE_URL: http://no-code-service:8006
      AI_ML_STRATEGY_SERVICE_URL: http://ai-ml-strategy-service:8002
      AUTH_SERVICE_URL: http://auth-service:8001
      BACKTEST_SERVICE_URL: http://backtest-service:8007
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      no-code-service:
        condition: service_healthy
      ai-ml-strategy-service:
        condition: service_healthy
      backtest-service:
        condition: service_healthy
    ports:
      - "8005:8005"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  adminer:
    image: adminer:latest
    container_name: alphintra-adminer
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - alphintra-minimal-network
    restart: unless-stopped

  wallet-service:
      build:
        context: ../../../src/backend/wallet-service
        dockerfile: Dockerfile
      container_name: alphintra-wallet-service
      environment:
        SPRING_PROFILES_ACTIVE: docker
        DATABASE_URL: postgresql://alphintra:alphintra123@postgres:5432/alphintra
        REDIS_URL: redis://:redis123@redis:6379
        KAFKA_BOOTSTRAP_SERVERS: kafka:29092 
      depends_on: 
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
      ports:
        - "8011:8011"
      networks:
        - alphintra-minimal-network 
      healthcheck:
        test: ["CMD", "curl", "_f", "http://localhost:8011/actuator/health"]
        interval: 30s 
        timeout: 10s 
        retries: 3 
        start_period: 40s 
      restart: unless-stopped


  trading-engine:
    build:
      context: ../../../src/backend/trading-engine
      dockerfile: Dockerfile.distroless
    container_name: alphintra-minimal-trading-engine
    environment:
      SPRING_PROFILES_ACTIVE: standalone
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      DATABASE_URL: jdbc:postgresql://postgres:5432/alphintra_trading_engine?user=alphintra&password=alphintra123
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8008:8008"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  auth-service:
    build:
      context: ../../../src/backend/auth-service
      dockerfile: Dockerfile
    container_name: alphintra-minimal-auth-service
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/alphintra_auth_service?user=alphintra&password=alphintra123
      REDIS_URL: redis://:redis123@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8009:8009"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Inference Service - Strategy execution and signal distribution
  inference-service:
    build:
      context: ../../../src/backend/inference-service
      dockerfile: Dockerfile
    container_name: alphintra-minimal-inference-service
    environment:
      # Service configuration
      DEBUG: true
      LOG_LEVEL: INFO
      SERVICE_PORT: 8003
      
      # Database connections
      AI_ML_DATABASE_URL: postgresql+asyncpg://alphintra:alphintra123@postgres:5432/alphintra-ai-ml-strategy-service
      NO_CODE_DATABASE_URL: postgresql+asyncpg://alphintra:alphintra123@postgres:5432/alphintra-no-code-service
      
      # Message queue and caching
      REDIS_URL: redis://:redis123@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Performance tuning
      MAX_CONCURRENT_STRATEGIES: 10
      STRATEGY_EXECUTION_TIMEOUT: 30
      SIGNAL_COOLDOWN_SECONDS: 60
      CACHE_TTL_SECONDS: 300
      
      # Security and limits
      MAX_STRATEGY_MEMORY_MB: 256
      MAX_STRATEGY_EXECUTION_TIME: 30
      MAX_CACHE_SIZE: 1000
      
      # Development settings
      ENABLE_TEST_ENDPOINTS: true
      USE_MOCK_MARKET_DATA: true
      DETAILED_ERRORS: true
      
      # Monitoring
      ENABLE_METRICS: true
      STRUCTURED_LOGGING: true
      
      # WebSocket configuration
      MAX_WEBSOCKET_CONNECTIONS: 100
      WEBSOCKET_PING_INTERVAL: 30
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      ai-ml-strategy-service:
        condition: service_healthy
      no-code-service:
        condition: service_healthy
    ports:
      - "8003:8003"
    networks:
      - alphintra-minimal-network
    volumes:
      - inference_logs:/app/logs
      - inference_temp:/app/temp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  customer-support-service:
    build:
      context: ../../../src/backend/customer-support-service
      dockerfile: Dockerfile
    container_name: alphintra-minimal-customer-support-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/alphintra_customer_support?user=alphintra&password=alphintra123
      REDIS_URL: redis://:redis123@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8010:8010"
      - "8085:8085"  # WebSocket port
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Marketplace Service - Stripe marketplace API for trading strategies
  marketplace:
    build:
      context: ../../../src/backend/marketplace
      dockerfile: Dockerfile
    container_name: alphintra-marketplace
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8012"]
    environment:
      DATABASE_URL: postgresql://alphintra:alphintra123@postgres:5432/alphintra-marketplace
      REDIS_URL: redis://:redis123@redis:6379
      STRIPE_SECRET_KEY: sk_test_placeholder_stripe_secret_key
      STRIPE_PUBLISHABLE_KEY: pk_test_placeholder_stripe_publishable_key
      STRIPE_WEBHOOK_SECRET: whsec_placeholder_webhook_secret
      DOMAIN_URL: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8012:8012"
    networks:
      - alphintra-minimal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

# Add this top-level volumes section if missing
volumes:
  adminer-data:
  postgres_minimal_data:
    driver: local
  redis_minimal_data:
    driver: local
  inference_logs:
    driver: local
  inference_temp:
    driver: local

networks:
  alphintra-minimal-network:
    driver: bridge