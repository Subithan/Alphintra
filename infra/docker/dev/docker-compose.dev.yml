# Development Docker Compose Configuration
# Only includes infrastructure services needed for local development
# Run: docker-compose -f docker-compose.dev.yml up -d

services:
  # ===============================
  # DATABASE SERVICES
  # ===============================

  # PostgreSQL - Main application database
  postgres:
    image: postgres:15-alpine
    container_name: alphintra-dev-postgres
    environment:
      POSTGRES_DB: alphintra
      POSTGRES_USER: alphintra
      POSTGRES_PASSWORD: alphintra123
      POSTGRES_MULTIPLE_DATABASES: "auth_db,trading_db,strategy_db,no_code_service_db"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ../../../databases/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alphintra"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # TimescaleDB - Time-series data for market data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: alphintra-dev-timescaledb
    environment:
      POSTGRES_DB: timescaledb
      POSTGRES_USER: timescale
      POSTGRES_PASSWORD: timescale123
    ports:
      - "5433:5432"
    volumes:
      - timescaledb_dev_data:/var/lib/postgresql/data
      - ../../../databases/timescaledb:/docker-entrypoint-initdb.d
    command: ["-c", "shared_preload_libraries=timescaledb"]
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timescale"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ===============================
  # CACHE SERVICES
  # ===============================

  # Redis - Primary cache and session store
  redis:
    image: redis:7-alpine
    container_name: alphintra-dev-redis
    command: redis-server --appendonly yes --requirepass redis123 --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===============================
  # MESSAGE QUEUE SERVICES
  # ===============================

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: alphintra-dev-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_dev_data:/var/lib/zookeeper/data
      - zookeeper_dev_logs:/var/lib/zookeeper/log
    networks:
      - alphintra-dev-network
    restart: unless-stopped

  # Kafka - Message streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: alphintra-dev-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_dev_data:/var/lib/kafka/data
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===============================
  # STORAGE SERVICES
  # ===============================

  # MinIO - Object storage for files, models, artifacts
  minio:
    image: minio/minio:latest
    container_name: alphintra-dev-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_dev_data:/data
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===============================
  # ML/AI SERVICES
  # ===============================

  # MLflow - Model registry and experiment tracking
  mlflow:
    image: python:3.11-slim
    container_name: alphintra-dev-mlflow
    ports:
      - "5001:5001"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://alphintra:alphintra123@postgres:5432/alphintra
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts/
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: >
      bash -c "pip install mlflow psycopg2-binary boto3 &&
               mlflow server --host 0.0.0.0 --port 5001 --backend-store-uri postgresql://alphintra:alphintra123@postgres:5432/alphintra --default-artifact-root s3://mlflow-artifacts/"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - alphintra-dev-network
    volumes:
      - mlflow_dev_data:/mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===============================
  # MONITORING SERVICES
  # ===============================

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: alphintra-dev-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../../../monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: alphintra-dev-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ../../../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - alphintra-dev-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: alphintra-dev-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - alphintra-dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===============================
  # DEVELOPMENT TOOLS
  # ===============================

  # MailHog - Email testing for development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: alphintra-dev-mailhog
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - alphintra-dev-network
    restart: unless-stopped

  # PgAdmin - PostgreSQL administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: alphintra-dev-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@alphintra.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - alphintra-dev-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander - Redis administration
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: alphintra-dev-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
    ports:
      - "8081:8081"
    networks:
      - alphintra-dev-network
    depends_on:
      - redis
    restart: unless-stopped

# ===============================
# VOLUMES
# ===============================
volumes:
  postgres_dev_data:
    driver: local
  timescaledb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  zookeeper_dev_data:
    driver: local
  zookeeper_dev_logs:
    driver: local
  kafka_dev_data:
    driver: local
  minio_dev_data:
    driver: local
  mlflow_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

# ===============================
# NETWORKS
# ===============================
networks:
  alphintra-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16