# Alphintra local development stack
version: '3.8'

services:
  # PostgreSQL (simulates GCP Cloud SQL)
  db:
    image: postgres:15
    container_name: alphintra-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: alphintra
      POSTGRES_PASSWORD: alphintra
      POSTGRES_DB: alphintra
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
      - ./databases/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - alphintra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alphintra"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TimescaleDB (for time-series market data)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: alphintra-tsdb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: tsuser
      POSTGRES_PASSWORD: tspass
      POSTGRES_DB: alphintra_ts
    volumes:
      - ./volumes/timescaledb:/home/postgres/pgdata
      - ./databases/timescaledb/init.sql:/docker-entrypoint-initdb.d/timescale_init.sql
    command: ["-c", "shared_preload_libraries=timescaledb"]
    networks:
      - alphintra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tsuser"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (simulates Cloud Memorystore)
  redis:
    image: redis:alpine
    container_name: alphintra-redis
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis:/data
    networks:
      - alphintra-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: alphintra-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./volumes/zookeeper:/var/lib/zookeeper
    networks:
      - alphintra-network

  # Kafka (event streaming)
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: alphintra-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - ./volumes/kafka:/var/lib/kafka/data
    networks:
      - alphintra-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow (simulates Vertex AI)
  mlflow:
    image: python:3.9-slim
    container_name: alphintra-mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: sqlite:///mlflow.db
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /artifacts
    volumes:
      - ./volumes/mlflow:/artifacts
      - ./volumes/mlflow-db:/app
    working_dir: /app
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --backend-store-uri sqlite:///mlflow.db 
               --default-artifact-root /artifacts 
               --host 0.0.0.0 --port 5000"
    networks:
      - alphintra-network

  # Strategy Engine API (Java/Spring Boot)
  strategy-engine:
    build: 
      context: ../src/backend/strategy-engine
      dockerfile: Dockerfile
    container_name: alphintra-strategy-engine
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://db:5432/alphintra
      DATABASE_USERNAME: alphintra
      DATABASE_PASSWORD: alphintra
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - alphintra-network
    restart: unless-stopped

  # Trading API (FastAPI Python)
  trading-api:
    build:
      context: ../src/backend/trading-api
      dockerfile: Dockerfile
    container_name: alphintra-trading-api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://alphintra:alphintra@db:5432/alphintra
      TIMESCALE_URL: postgresql://tsuser:tspass@timescaledb:5432/alphintra_ts
      REDIS_URL: redis://redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      db:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - alphintra-network
    restart: unless-stopped

  # Auth Service (Spring Boot)
  auth-service:
    build:
      context: ../src/backend/auth-service
      dockerfile: Dockerfile
    container_name: alphintra-auth-service
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://db:5432/alphintra
      DATABASE_USERNAME: alphintra
      DATABASE_PASSWORD: alphintra
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - alphintra-network
    restart: unless-stopped

  # Broker Connector (Multi-exchange integration)
  broker-connector:
    build:
      context: ../src/backend/broker-connector
      dockerfile: Dockerfile
    container_name: alphintra-broker-connector
    ports:
      - "8084:8080"
    environment:
      DATABASE_URL: postgresql://alphintra:alphintra@db:5432/alphintra
      REDIS_URL: redis://redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - alphintra-network
    restart: unless-stopped

  # Broker Simulator (Mock exchanges)
  broker-simulator:
    build:
      context: ../src/backend/broker-simulator
      dockerfile: Dockerfile
    container_name: alphintra-broker-simulator
    ports:
      - "8082:8080"
    environment:
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - alphintra-network
    restart: unless-stopped

  # Spring Cloud Gateway
  gateway:
    build:
      context: ../services/gateway
      dockerfile: Dockerfile
    container_name: alphintra-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      STRATEGY_ENGINE_URL: http://strategy-engine:8080
      TRADING_API_URL: http://trading-api:8000
      AUTH_SERVICE_URL: http://auth-service:8080
      BROKER_CONNECTOR_URL: http://broker-connector:8080
    depends_on:
      - strategy-engine
      - trading-api
      - auth-service
      - broker-connector
    networks:
      - alphintra-network
    restart: unless-stopped

  # Prometheus (metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: alphintra-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../services/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./volumes/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - alphintra-network
    restart: unless-stopped

  # Grafana (dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: alphintra-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./volumes/grafana:/var/lib/grafana
      - ../services/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../services/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - alphintra-network
    restart: unless-stopped

  # Loki (log aggregation)
  loki:
    image: grafana/loki:latest
    container_name: alphintra-loki
    ports:
      - "3100:3100"
    volumes:
      - ../services/monitoring/loki.yml:/etc/loki/local-config.yaml
      - ./volumes/loki:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - alphintra-network
    restart: unless-stopped

  # Promtail (log shipper)
  promtail:
    image: grafana/promtail:latest
    container_name: alphintra-promtail
    volumes:
      - ../services/monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - alphintra-network
    restart: unless-stopped

networks:
  alphintra-network:
    driver: bridge

volumes:
  postgres-data:
  timescaledb-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  mlflow-data:
  mlflow-db:
  prometheus-data:
  grafana-data:
  loki-data:
