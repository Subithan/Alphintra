apiVersion: apps/v1
kind: Deployment
metadata:
  name: marketplace-service
  labels:
    app: marketplace-service
    component: backend
    environment: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: marketplace-service
  template:
    metadata:
      labels:
        app: marketplace-service
        component: backend
        environment: dev
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8200"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: marketplace-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: marketplace-service
          image: gcr.io/alphintra-472817/marketplace-service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8200
              protocol: TCP
          envFrom:
            - configMapRef:
                name: marketplace-service-config
          env:
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: marketplace-service-secrets
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: marketplace-service-secrets
                  key: DATABASE_PASSWORD
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 40
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 12
            timeoutSeconds: 5
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
            - name: tmp
              mountPath: /app/tmp
      volumes:
        - name: app-logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
