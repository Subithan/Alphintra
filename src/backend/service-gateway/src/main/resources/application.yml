spring:
  application:
    name: service-gateway
  main:
    web-application-type: reactive
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
  cloud:
    gateway:
      # Global CORS for browser clients
      globalcors:
        add-to-simple-url-handler-mapping: true
        corsConfigurations:
          '[/**]':
            allowedOrigins: ${GATEWAY_CORS_ALLOWED_ORIGINS:*}
            allowedMethods: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
            allowedHeaders: "*"
            exposedHeaders: "X-Correlation-Id,X-RateLimit-Remaining,X-RateLimit-Replenish-Rate,X-RateLimit-Burst-Capacity"
            allowCredentials: false
      httpclient:
        connect-timeout: 4000
        response-timeout: 60000
      default-filters:
        - name: RequestSize
          args:
            maxSize: ${GATEWAY_MAX_REQUEST_SIZE:10MB}
        - name: Retry
          args:
            retries: 2
            statuses: BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
        - name: CircuitBreaker
          args:
            name: globalCircuitBreaker
            fallbackUri: forward:/_fallback/unavailable
      routes:
        - id: auth-service
          uri: ${AUTH_SERVICE_URI:http://auth-service.default.svc.cluster.local:8009}
          predicates:
            - Path=/api/auth/**, /api/users/**, /api/kyc/**
          filters:
            - PreserveHostHeader
            - RemoveRequestHeader=Cookie
        - id: trading-engine
          uri: ${TRADING_ENGINE_URI:http://trading-engine.default.svc.cluster.local:8100}
          predicates:
            - Path=/api/trading/**, /api/orders/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: marketplace-service
          uri: ${MARKETPLACE_SERVICE_URI:http://marketplace-service.default.svc.cluster.local:8200}
          predicates:
            - Path=/api/marketplace/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: graphql-service
          uri: ${GRAPHQL_SERVICE_URI:http://graphql-service.default.svc.cluster.local:8300}
          predicates:
            - Path=/graphql/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: market-data-websocket
          uri: ${MARKET_DATA_WS_URI:ws://market-data.default.svc.cluster.local:8082}
          predicates:
            - Path=/ws/market/**
          filters:
            - PreserveHostHeader
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: risk-management-service
          uri: ${RISK_MANAGEMENT_URI:http://risk-management-service.platform:8002}
          predicates:
            - Path=/api/risk-profiles/**, /api/portfolio/**, /api/positions/**, /api/trades/**, /api/stress-tests/**, /api/reports/**, /api/emergency/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: strategy-service
          uri: ${STRATEGY_SERVICE_URI:http://strategy-service.platform:8003}
          predicates:
            - Path=/api/strategies/**, /api/backtests/**, /api/live-trading/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: no-code-service
          uri: ${NO_CODE_SERVICE_URI:http://no-code-service.platform:8004}
          predicates:
            - Path=/api/workflows/**, /api/executions/**, /api/components/**, /api/templates/**, /api/workflow-versions/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: ai-ml-strategy-service
          uri: ${AI_ML_SERVICE_URI:http://ai-ml-strategy-service.platform:8002}
          predicates:
            - Path=/api/files/**, /api/ai/**, /feature-engineering
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
        - id: customer-support-service
          uri: ${CUSTOMER_SUPPORT_SERVICE_URI:http://customer-support-service.platform:8010}
          predicates:
            - Path=/api/customer-support/**, /ws/support/**, /ws/tickets/**
          filters:
            - PreserveHostHeader
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GATEWAY_RATE_LIMIT_REPLENISH:40}
                redis-rate-limiter.burstCapacity: ${GATEWAY_RATE_LIMIT_BURST:80}
                key-resolver: "#{@principalKeyResolver}"
server:
  port: ${SERVER_PORT:8080}

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO
    com.alphintra.gateway: DEBUG
    io.jsonwebtoken: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      probes:
        enabled: true
  health:
    redis:
      enabled: false

gateway:
  security:
    enabled: ${GATEWAY_SECURITY_ENABLED:false}
    jwt:
      secret: ${GATEWAY_JWT_SECRET:U29tZVZlcnlTdHJvbmdTZWNyZXRLZXlXaXRoRW5vdWdoQnl0ZXNGb3JFUjUxMkFsZ29yaXRobS0xMjM0NTY3ODkwYWJjZGVmZ2hpams=}
      clock-skew-seconds: ${GATEWAY_JWT_CLOCK_SKEW:60}
    auth-service:
      delegation-enabled: ${GATEWAY_DELEGATION_ENABLED:true}
      fallback-local: ${GATEWAY_DELEGATION_FALLBACK:false}
      base-url: ${AUTH_SERVICE_BASE_URL:${AUTH_SERVICE_URI:http://auth-service.default.svc.cluster.local:8009}}
      timeout-ms: ${AUTH_SERVICE_TIMEOUT_MS:1500}
    public-paths:
      - /api/auth/login
      - /api/auth/register
      - /api/auth/validate
      - /api/auth/introspect
      - /actuator/**
      - /_fallback/**
