version: '3.8'

services:
  inference-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: alphintra-inference-service
    ports:
      - "8002:8002"
    environment:
      # Service configuration
      DEBUG: "true"
      
      # Database connections (adjust URLs as needed)
      AI_ML_DATABASE_URL: "postgresql://alphintra:alphintra@host.docker.internal:5432/alphintra_ai_ml"
      NO_CODE_DATABASE_URL: "postgresql://alphintra:alphintra@host.docker.internal:5432/alphintra_nocode"
      
      # Redis and Kafka
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      
      # Market data API keys (set these in .env file)
      POLYGON_API_KEY: "${POLYGON_API_KEY:-}"
      ALPHA_VANTAGE_API_KEY: "${ALPHA_VANTAGE_API_KEY:-}"
      IEX_CLOUD_API_KEY: "${IEX_CLOUD_API_KEY:-}"
      
      # Logging
      LOG_LEVEL: "INFO"
      
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - redis
      - kafka
    networks:
      - alphintra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: alphintra-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - alphintra-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: alphintra-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - alphintra-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: alphintra-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - alphintra-network
    restart: unless-stopped

  # Optional: Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: alphintra-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - alphintra-network
    profiles:
      - debug

  # Optional: Redis Insight for development
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: alphintra-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - alphintra-network
    profiles:
      - debug

volumes:
  redis_data:
    driver: local
  redis_insight_data:
    driver: local

networks:
  alphintra-network:
    driver: bridge
    external: false