# Multi-stage build for Gateway Service (Java Spring Boot)
# Production-ready, secure, and lightweight container

# Stage 1: Build stage with Maven
FROM eclipse-temurin:17-jdk-jammy AS builder

# Install required packages for building
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Maven configuration files
COPY pom.xml .
COPY mvnw .
COPY mvnw.cmd .
COPY .mvn/ .mvn/

# Make Maven wrapper executable
RUN chmod +x mvnw

# Download dependencies (this layer will be cached)
RUN ./mvnw dependency:go-offline -B -X -e

# Copy source code
COPY src/ src/

# Build the application
RUN ./mvnw clean package -DskipTests -B -X -e

# Verify JAR was built correctly
RUN ls -la target/ && \
    test -f target/*.jar

# Stage 2: Runtime stage with Google Distroless
FROM gcr.io/distroless/java17-debian12

# Set working directory
WORKDIR /app

# Copy the built JAR from builder stage
COPY --from=builder /app/target/*.jar app.jar

# Use non-root user (distroless already has nonroot user)
USER nonroot:nonroot

# Expose port
EXPOSE 8080

# Set JVM options optimized for containerized environment
ENV JAVA_OPTS="-server \
    -Xmx256m \
    -Xms128m \
    -XX:+UseG1GC \
    -XX:MaxGCPauseMillis=50 \
    -XX:+UseStringDeduplication \
    -XX:+UseCompressedOops \
    -XX:+UseCompressedClassPointers \
    -XX:+UseContainerSupport \
    -XX:MaxRAMPercentage=75.0 \
    -Djava.security.egd=file:/dev/./urandom \
    -Dspring.backgroundpreinitializer.ignore=true \
    -Dspring.jmx.enabled=false \
    -Dfile.encoding=UTF-8 \
    -Duser.timezone=UTC"

# Run the application
ENTRYPOINT ["java", "-jar", "app.jar"]