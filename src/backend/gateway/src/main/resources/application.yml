server:
  port: 8080
  shutdown: graceful

spring:
  application:
    name: api-gateway
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  config:
    import: optional:configserver:http://config-server.alphintra.svc.cluster.local:8888
  
  cloud:
    config:
      enabled: true
      discovery:
        enabled: true
        service-id: config-server
  
    gateway:
      default-filters:
        - name: DedupeResponseHeader
          args:
            name: Access-Control-Allow-Credentials,Access-Control-Allow-Origin
            strategy: RETAIN_FIRST
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 100
            redis-rate-limiter.burstCapacity: 200
            redis-rate-limiter.requestedTokens: 1
        - name: CircuitBreaker
          args:
            name: defaultCircuitBreaker
            fallbackUri: forward:/fallback
        - name: Retry
          args:
            retries: 3
            series: SERVER_ERROR
            methods: GET,POST,PUT,DELETE
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
      
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      
      httpclient:
        connect-timeout: 5000
        response-timeout: 30s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      
      routes:
        # Trading API Routes - High priority financial operations
        - id: trading-service
          uri: lb://trading-service
          predicates:
            - Path=/api/v1/trading/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, trading
            - name: CircuitBreaker
              args:
                name: trading-service
                fallbackUri: forward:/fallback/trading
          metadata:
            priority: 100
            
        # Risk Management Routes - Critical security
        - id: risk-service
          uri: lb://risk-service
          predicates:
            - Path=/api/v1/risk/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, risk
            - name: CircuitBreaker
              args:
                name: risk-service
                fallbackUri: forward:/fallback/risk
          metadata:
            priority: 90
            
        # User Management Routes
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/v1/users/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, user
            - name: CircuitBreaker
              args:
                name: user-service
                fallbackUri: forward:/fallback/user
            
        # No-Code Service Routes
        - id: no-code-service
          uri: lb://no-code-service
          predicates:
            - Path=/api/v1/no-code/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, nocode
            - name: CircuitBreaker
              args:
                name: no-code-service
                fallbackUri: forward:/fallback/nocode
            
        # Strategy Engine Routes
        - id: strategy-service
          uri: lb://strategy-service
          predicates:
            - Path=/api/v1/strategy/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, strategy
            - name: CircuitBreaker
              args:
                name: strategy-service
                fallbackUri: forward:/fallback/strategy
            
        # Auth Service Routes - No auth required for login/register
        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, auth
            - name: CircuitBreaker
              args:
                name: auth-service
                fallbackUri: forward:/fallback/auth
            
        # Broker Connector Routes
        - id: broker-service
          uri: lb://broker-service
          predicates:
            - Path=/api/v1/broker/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, broker
            - name: CircuitBreaker
              args:
                name: broker-service
                fallbackUri: forward:/fallback/broker
            
        # Notification Service Routes
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/v1/notifications/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, notification
            - name: CircuitBreaker
              args:
                name: notification-service
                fallbackUri: forward:/fallback/notification
            
        # GraphQL Unified Endpoint
        - id: graphql-service
          uri: lb://graphql-service
          predicates:
            - Path=/graphql/**
          filters:
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, graphql
            - name: CircuitBreaker
              args:
                name: graphql-service
                fallbackUri: forward:/fallback/graphql
            
        # WebSocket Support for real-time updates
        - id: websocket-service
          uri: lb://websocket-service
          predicates:
            - Path=/ws/**
          filters:
            - AddRequestHeader=X-Request-Source, gateway
            - AddRequestHeader=X-Service-Type, websocket
      
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - PATCH
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600
  
  data:
    redis:
      host: ${REDIS_HOST:redis-primary.alphintra.svc.cluster.local}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:alphintra_redis_pass}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 50
          max-idle: 20
          min-idle: 5
          max-wait: 2000ms
  
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://auth-service.alphintra.svc.cluster.local:8080}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://auth-service.alphintra.svc.cluster.local:8080/.well-known/jwks.json}

eureka:
  server:
    enable-self-preservation: false
    eviction-interval-timer-in-ms: 5000
    renewal-percent-threshold: 0.85
    response-cache-update-interval-ms: 5000
    response-cache-auto-expiration-in-seconds: 30
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
    healthcheck:
      enabled: true
    registry-fetch-interval-seconds: 10
  instance:
    prefer-ip-address: true
    ip-address: ${POD_IP:127.0.0.1}
    instance-id: ${spring.application.name}:${POD_IP}:${server.port}
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    health-check-url-path: /actuator/health
    status-page-url-path: /actuator/info
    metadata-map:
      zone: alphintra-cluster
      profile: ${spring.profiles.active}
      version: ${project.version:1.0.0}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    gateway:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    reactor.netty: INFO
    io.netty: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: logs/gateway.log
    max-size: 100MB
    max-history: 30

resilience4j:
  circuitbreaker:
    instances:
      defaultCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      auth-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      trading-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      risk-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      user-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      no-code-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      strategy-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      broker-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
      notification-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
  
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.client.ResourceAccessException
  
  ratelimiter:
    instances:
      default:
        limitForPeriod: 100
        limitRefreshPeriod: 1s
        timeoutDuration: 0s

# Custom application properties
alphintra:
  gateway:
    security:
      jwt:
        secret: ${JWT_SECRET:your-secret-key-here-make-it-long-and-secure}
        expiration: 86400 # 24 hours
      cors:
        allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
        allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
        allowed-headers: "*"
        allow-credentials: true
        max-age: 3600
    
    rate-limiting:
      enabled: true
      default-rate: 100 # requests per minute
      burst-capacity: 200
      authenticated-rate: 1000 # higher rate for authenticated users
    
    circuit-breaker:
      enabled: true
      failure-threshold: 50 # percentage
      timeout: 5s
      reset-timeout: 30s
    
    monitoring:
      metrics-enabled: true
      tracing-enabled: true
      health-check-interval: 30s
    
    fallback:
      enabled: true
      default-message: "Service temporarily unavailable. Please try again later."

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev
  
  cloud:
    gateway:
      httpclient:
        wiretap: true
      httpserver:
        wiretap: true

logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.security: DEBUG
    reactor.netty.http.client: DEBUG
    reactor.netty.http.server: DEBUG

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod

logging:
  level:
    org.springframework.cloud.gateway: INFO
    org.springframework.security: WARN
    reactor.netty: WARN
    io.netty: WARN
  file:
    name: /var/log/alphintra/gateway.log

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus

alphintra:
  gateway:
    security:
      jwt:
        secret: ${JWT_SECRET}
    monitoring:
      health-check-interval: 60s